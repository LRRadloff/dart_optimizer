ggplot(aes(x = T1, y = T2)) +
geom_jitter(width = 0.05, height = 0.05, alpha = 0.5) +
ggtitle("First two jumps - any size")
## Kernel-Density-Estimates T1 vs. T2 - both cases
first2 %>%
gather(key = trans, value = value, T1, T2) %>%
ggplot(aes(x = value, fill = trans)) +
geom_density(alpha = 0.3)
first2_oj1 %>%
gather(key = trans, value = value, T1, T2) %>%
ggplot(aes(x = value, fill = trans)) +
geom_density(alpha = 0.3)
first2 %>%
bin_rows(first2_oj1, .id = oj1) %>%
gather(key = trans, value = value, T1, T2) %>%
ggplot(aes(x = value, fill = trans)) +
geom_density(alpha = 0.3) +
facet_wrap(~oj1)
first2 %>%
bind_rows(first2_oj1, .id = oj1) %>%
gather(key = trans, value = value, T1, T2) %>%
ggplot(aes(x = value, fill = trans)) +
geom_density(alpha = 0.3) +
facet_wrap(~oj1)
first2 %>%
bind_rows(first2_oj1, .id = T) %>%
gather(key = trans, value = value, T1, T2) %>%
ggplot(aes(x = value, fill = trans)) +
geom_density(alpha = 0.3) +
facet_wrap(~oj1)
first2 %>%
bind_rows(first2_oj1, .id = "oj1") %>%
gather(key = trans, value = value, T1, T2) %>%
ggplot(aes(x = value, fill = trans)) +
geom_density(alpha = 0.3) +
facet_wrap(~oj1)
first2 %>%
first2 %>%
bind_rows(first2_oj1, .id = c("oj1" = c("all_sizes", "only_1"))) %>%
gather(key = trans, value = value, T1, T2) %>%
ggplot(aes(x = value, fill = trans)) +
geom_density(alpha = 0.3) +
facet_wrap(~oj1)
first2 %>%
bind_rows(first2_oj1, .id = c("oj1" = c("all_sizes", "only_1"))) %>%
gather(key = trans, value = value, T1, T2) %>%
ggplot(aes(x = value, fill = trans)) +
geom_density(alpha = 0.3) +
facet_wrap(~oj1)
first2 %>%
bind_rows(first2_oj1, .id = list("oj1" = c("all_sizes", "only_1"))) %>%
gather(key = trans, value = value, T1, T2) %>%
ggplot(aes(x = value, fill = trans)) +
geom_density(alpha = 0.3) +
facet_wrap(~oj1)
first2 %>%
bind_rows(first2_oj1, .id = "oj1") %>%
gather(key = trans, value = value, T1, T2) %>%
ggplot(aes(x = value, fill = trans)) +
geom_density(alpha = 0.3) +
facet_wrap(~oj1)
## summary statistics for each case
first2 %>%
gather(key = trans, value = value, T1, T2) %>%
group_by(trans) %>%
summasize(mu = mean(value),
sd = sd(value),
med = median(value),
iqr = IQR(value))
## summary statistics for each case
first2 %>%
gather(key = trans, value = value, T1, T2) %>%
group_by(trans) %>%
summarize(mu = mean(value),
sd = sd(value),
med = median(value),
iqr = IQR(value))
first2_oj1 %>%
gather(key = trans, value = value, T1, T2) %>%
group_by(trans) %>%
summarize(mu = mean(value),
sd = sd(value),
med = median(value),
iqr = IQR(value))
first2 %>%
ggplor(aes(x = T1, y = T2)) +
geom_jitter(width = 0.05, height = 0.05, alpha = 0.5) +
scale_x_log10() +
scale_y_log10()
first2 %>%
ggplot(aes(x = T1, y = T2)) +
geom_jitter(width = 0.05, height = 0.05, alpha = 0.5) +
scale_x_log10() +
scale_y_log10()
first2_oj1 %>%
ggplot(aes(x = T1, y = T2)) +
geom_jitter(width = 0.05, height = 0.05, alpha = 0.5) +
scale_x_log10() +
scale_y_log10()
cor(first2$T1, first2$T2)
cor(first2_oj1$T1, first2_oj1$T2)
12800*0.8
12800*0.9
13800*0.8
13800*0.9
13+20+18+8+6
65/40
library(tidyverse)
X <- rnorm(1000)
Y <- rnorm(1000)
data <- tibble(X,Y)
mu = c(2, 1)
mu <- c(2, 1)
mu <- c(2, 1)
sd_x <- 0.5
sd_y <- 1.2
cor_xy <- 0.6
var_x <- sd_x^2
var_y <- sd-y^2
cov_xy <- cor_xy * sd_x * sd_y
Sigma <- matrix(c(var_x, cov_xy, cov_xy, var_y))
var_y <- sd_y^2
cov_xy <- cor_xy * sd_x * sd_y
Sigma <- matrix(c(var_x, cov_xy, cov_xy, var_y))
Sigma
Sigma <- matrix(c(var_x, cov_xy, cov_xy, var_y), nrow = 2)
Sigma
data <- data %>%
mutate(X_tilde = var_x * X + cov_xy * Y,
Y_tilde = var_y * Y + cov_xy * X)
data %>%
ggplot(aes(x = X_tilde, y = Y_tilde)) +
geom_point()
library(tidyverse)
X <- rnorm(1000)
Y <- rnorm(1000)
data <- tibble(X,Y)
mu_x = 2
mu_y = 1
sd_x <- 0.5
sd_y <- 1.2
cor_xy <- 0.6
var_x <- sd_x^2
var_y <- sd_y^2
cov_xy <- cor_xy * sd_x * sd_y
Sigma <- matrix(c(var_x, cov_xy, cov_xy, var_y), nrow = 2)
data <- data %>%
mutate(X_tilde = var_x * X + cov_xy * Y + mu_x,
Y_tilde = var_y * Y + cov_xy * X + mu_y)
data %>%
ggplot(aes(x = X_tilde, y = Y_tilde)) +
geom_point() +
geom_abline(slope = cor_xy * sd_y / sd_x, intercept = mu_y - slope * mu_x)# +
geom_abline()
data %>%
ggplot(aes(x = X_tilde, y = Y_tilde)) +
geom_point() +
geom_abline(slope = cor_xy * sd_y / sd_x, intercept = mu_y - (cor_xy * sd_y / sd_x) * mu_x) +
geom_abline(slope = sd_y / sd_x, intercept = mu_y - (sd_y / sd_x) * mu_x)
data %>%
ggplot(aes(x = X_tilde, y = Y_tilde)) +
geom_point() +
geom_abline(slope = cor_xy * sd_y / sd_x, intercept = mu_y - (cor_xy * sd_y / sd_x) * mu_x, color = "red") +
geom_abline(slope = sd_y / sd_x, intercept = mu_y - (sd_y / sd_x) * mu_x, color = "blue")
data %>%
ggplot(aes(x = X_tilde, y = Y_tilde)) +
geom_point() +
geom_abline(slope = cor_xy * sd_y / sd_x, intercept = mu_y - (cor_xy * sd_y / sd_x) * mu_x, color = "red") +
geom_abline(slope = sd_y / sd_x, intercept = mu_y - (sd_y / sd_x) * mu_x, color = "blue") +
xlim(0, 5) +
ylim(0, 5)
data %>%
summarize(m_x = mean(X_tilde),
m_y = mean(Y_tilde),
s_x = sd(X_tilde),
s_y = sd(Y_tilde),
r_xy = cor(X_tilde, Y_tilde))
3!
faculty(3)
factorial(3)
factorial(100)
(0.34-0.4)/0.0219
1-0.4^5 - 5*0.6*0.4^4
0.4^5
0.4^5 *5
0.0512 + 0.91296
1-5*0.6*0.4^4
1-0.6*0.4^4
1-0.6*0.4^4 - 0.4^5
1.03^5
zinskurve <- 0.447 + 0.08 * 1:10
1 - exp(zinskurve[1])
1 - exp(-zinskurve[1])
1 - exp(-zinskurve[10] * 10)
zinskurve
1 - exp(-zinskurve[10]/100 * 10)
exp(-zinskurve[10]/100 * 10)
zinskurve <- 0.447 + 0.08 * 1:10 / 100
1 - exp(-zinskurve[10] * 10)
zinskurve <- 0.447 + 0.08 * 1:10 / 100
1 - exp(-zinskurve[10] * 10)
zinskurve <- 0.447 + 0.08 * 1:10
1 - exp(-zinskurve[10]/100 * 10)
zinskurve <- (0.447 + 0.08 * 1:10) / 100
1 - exp(-zinskurve[10] * 10)
nenner <- sum(exp(-zinskurve * 1:10))
zähler
zinskurve <- (0.447 + 0.08 * 1:10) / 100
zaehler <- 1 - exp(-zinskurve[10] * 10)
nenner <- sum(exp(-zinskurve * 1:10))
festzins <- zaehler / nenner
zaehler
nenner
festzins
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
# Dateneingabe
sep2016 <- c(-0.539, -0.622, -0.644, -0.615, -0.508, -0.483, -0.423, -0.328, -0.204, -0.066) / 100
sep2007 <- c(4.054, 4.030, 4.121, 4.170, 4.159, 4.216, 4.266, 4.293, 4.316, 4.344) / 100
par(mfrow=c(1,2))
plot(sep2007 * 100, type = "l", ylab = "Zins", xlab = "Laufzeit", main = "Zinskurve Sep 2007")
points(sep2007 * 100)
plot(sep2016 * 100, type = "l", ylab = "Zins", xlab = "Laufzeit", main = "Zinskurve Sep 2016")
points(sep2016 * 100)
# Einige PLots mit ggplot2
# Zusammenfassung der Daten in einem DataFrame (Standard-Datenformat in R; Tabelle mit identischem Datentyp je Spalte)
zinsen <- data_frame(Jahr = 1:10, sep07 = sep2007, sep16 = sep2016)
# Einzelne Plots der beiden Zinskurven
zinsen %>%
ggplot(aes(x = Jahr, y = sep07 * 100)) +
geom_point() +
geom_line() +
scale_x_continuous(breaks = 1:10) +
labs(title = "Zinskurve von Deutschen Bundesanleihen im September 2007",
x = "Laufzeit",
y = "Zins in Prozent")
zinsen %>%
ggplot(aes(x = Jahr, y = sep16* 100)) +
geom_point() +
geom_line() +
scale_x_continuous(breaks = 1:10) +
labs(title = "Zinskurve von Deutschen Bundesanleihen im September 2016",
x = "Laufzeit",
y = "Zins in Prozent")
# Umwandlung der Daten in "langes Format"
# Zum Verständnis am besten die beiden Tabellen zinsen und zinsen_long anschauen und vergleichen
# Dieses "lange" Format hat häufig Vorteile zum PLotten mit ggplot2
zinsen_long <- zinsen %>%
gather(key = "Zeitpunkt", value = "Zins", 2:3)
zinsen_long %>%
ggplot(aes(x = Jahr, y = Zins * 100, color = Zeitpunkt)) +
geom_point() +
geom_line() +
scale_x_continuous(breaks = 1:10) +
labs(title = "Zinskurve von Deutschen Bundesanleihen im September 2007 und 2016",
x = "Laufzeit",
y = "Zins in Prozent")
zinsen_long %>%
ggplot(aes(x = Jahr, y = Zins * 100)) +
geom_point() +
geom_line() +
facet_wrap(~Zeitpunkt) +
scale_x_continuous(breaks = 1:10) +
labs(title = "Zinskurve von Deutschen Bundesanleihen im September 2007 und 2016",
x = "Laufzeit",
y = "Zins in Prozent")
zinsen_long %>%
ggplot(aes(x = Jahr, y = Zins * 100)) +
geom_point() +
geom_line() +
facet_wrap(~ Zeitpunkt, scales = "free_y") +
scale_x_continuous(breaks = 1:10) +
labs(title = "Zinskurve von Deutschen Bundesanleihen im September 2007 und 2016",
x = "Laufzeit",
y = "Zins in Prozent")
fra <- function(vlz, lz, zins) {
if (vlz + lz > 10) {
print("Kein Zins verfügbar!")
return(NA)
}
r.t0_T <- zins[vlz + lz]
r.t1_t0 <- zins[vlz]
fr <- (r.t0_T * (vlz + lz) - r.t1_t0 * vlz) / lz
return(fr)
}
fra(2,4,zinsen$sep07)
fra(2,4,zinsen$sep16)
r_tats <- c(0.527, 0.614, 0.755, 0.843, 0.935, 1.040, 1.091, 1.041, 1.194, 1.238, 1.282, 1.327) / 100
len(r_tats)
length(r_tats)
length(r_tats)
nominal <- 10000000
zahlung_fix <- rep(nominal * r_fix, 10)
zinskurve <- (0.447 + 0.08 * 1:10) / 100
zaehler <- 1 - exp(-zinskurve[10] * 10)
nenner <- sum(exp(-zinskurve * 1:10))
r_fix <- zaehler / nenner
zaehler
nenner
r_fix
r_tats <- c(0.527, 0.614, 0.755, 0.843, 0.935, 1.040, 1.091, 1.041, 1.194, 1.238, 1.282, 1.327) / 100
length(r_tats)
nominal <- 10000000
zahlung_fix <- rep(nominal * r_fix, 10)
zahlung_var <- nominal * r_tats[1:10]
# Vorzeichen abhängig von Betrachtungsweise
zahlung_netto = zahlung_fix - zahlung_var
tabelle <- data_frame(zahlung_fix, zahlung_var, zahlung_netto)
tabelle
adidas <- read.csv("C:\\Users\\Radloff\\Documents\\LEHRE\\adidas_stock_prices.csv")
shiny::runApp('R Kram/Dart_Optimizer')
runApp('R Kram/Dart_Optimizer')
runApp('R Kram/Dart_Optimizer')
runApp('R Kram/Dart_Optimizer')
runApp('R Kram/Dart_Optimizer')
runApp('R Kram/Dart_Optimizer')
runApp('R Kram/Dart_Optimizer')
runApp('R Kram/Dart_Optimizer')
runApp('R Kram/Dart_Optimizer')
runApp('R Kram/Dart_Optimizer')
runApp('R Kram/Dart_Optimizer')
runApp('R Kram/Dart_Optimizer')
runApp('R Kram/Dart_Optimizer')
runApp('R Kram/Dart_Optimizer')
paste('Hundert:', 100)
runApp('R Kram/Dart_Optimizer')
runApp('R Kram/Dart_Optimizer')
runApp('R Kram/Dart_Optimizer')
runApp('R Kram/Dart_Optimizer')
runApp('R Kram/Dart_Optimizer')
runApp('R Kram/Dart_Optimizer')
runApp('R Kram/Dart_Optimizer')
runApp('R Kram/Dart_Optimizer')
runApp('R Kram/Dart_Optimizer')
runApp('R Kram/Dart_Optimizer')
runApp('R Kram/Dart_Optimizer')
runApp('R Kram/Dart_Optimizer')
runApp('R Kram/Dart_Optimizer')
runApp('R Kram/Dart_Optimizer')
exp(0.00026)
library(tidyverse)
cars <- read_csv('C:\\Users\\Radloff\\Documents\\MA_Wang\\car_prices.csv')
cars %>% glimpse()
cars %>% summary()
cars %>% type()
cars %>% info()
cars %>% class()
cars %>% map(~class(x))
cars %>% map(~class(.x))
cars %>% map_chr(~class(.x))
cars %>% map_chr(~class(.x)) %>%
unique()
num_cols <- cars %>% map_chr(~class(.x)) == 'numeric'
cat_cols <- cars %>% map_chr(~class(.x)) == 'character'
cars[num_cols]
cars[cat_cols]
cars[cat_cols] %>% map_int(~length(unique(.x)))
cars %>% nrows()
cars %>% nrow()
cars %>% ncols()
cars %>% ncol()
cars[cat_cols] %>% map_int(~length(unique(.x))) %>% sum()
cars$CarName %>% str_extract('^[a-zA-Z]')
cars$CarName %>% str_extract('^([a-zA-Z]+)')
cars <- cars %>%
mutate(brand = str_extract(CarName, '^([a-zA-Z]+)'))
cars$brand
cars$brand %>% table()
# come cleaning of brands
cars <- cars %>%
mutate(brands = recode(brands,
maxda = 'mazda',
Nissan = 'nissan',
porcshce = 'porsche',
toyouta = 'toyota',
vokswagen = 'volkswagen',
vw = 'volkswagen'))
# come cleaning of brands
cars <- cars %>%
mutate(brand = recode(brand,
maxda = 'mazda',
Nissan = 'nissan',
porcshce = 'porsche',
toyouta = 'toyota',
vokswagen = 'volkswagen',
vw = 'volkswagen'))
cars$brand %>% table()
cat_cols <- cars %>% map_chr(~class(.x)) == 'character'
cars[cat_cols] %>% map_int(~length(unique(.x)))
cars[cat_cols] %>%
select(-CarName) %>%
map_int(~length(unique(.x)))
cars[cat_cols] %>%
select(-CarName) %>%
map_int(~length(unique(.x))) %>%
sum()
cars %>% ncol()
cars[cat_cols] %>% map_int(~length(unique(.x)))
cars$drivewheel %>% table()
install.packages("sqldf")
library(sqldf)
data <- read_csv("sim_means.csv")
library(tidyverse)
data <- read_csv("sim_means.csv")
setwd("C:/Users/Radloff/Documents/R Kram/dart_optimizer/Dart_Optimizer")
getwd()
data <- read_csv("sim_means.csv")
data %>% filter(abs(sd_vert - input$sd_vert) < 0.00001,
abs(sd_horiz - input$sd_horiz) < 0.00001)
sd_vert_ex <- 0.31
sd_horiz_ex <- 0.14
data %>% filter(abs(sd_vert - sd_vert_ex) < 0.00001,
abs(sd_horiz - sd_horiz_ex) < 0.00001)
sql <- paste0("
SELECT x_target, y_target, mean_res
FROM file
WHERE ABS(sd_vert - ", sd_vert_ex, ") < 0.00001
AND ABS(sd_horiz - ", sd_horiz_ex, ") < 0.00001")
read.sql.csv(
file = "sim_means.csv",
sql = sql,
sep = ","
)
sql <- paste0("
SELECT x_target, y_target, mean_res
FROM file
WHERE ABS(sd_vert - ", sd_vert_ex, ") < 0.00001
AND ABS(sd_horiz - ", sd_horiz_ex, ") < 0.00001")
read.csv.sql(
file = "sim_means.csv",
sql = sql,
sep = ","
)
sql <- paste0("
SELECT x_target, y_target, mean_res
FROM file
WHERE ABS(sd_vert - ", sd_vert_ex, ") < 0.001
AND ABS(sd_horiz - ", sd_horiz_ex, ") < 0.001")
read.csv.sql(
file = "sim_means.csv",
sql = sql,
sep = ","
)
sql <- paste0("
SELECT x_target, y_target, mean_res
FROM file
WHERE sd_vert > ", sd_vert_ex
)
read.csv.sql(
file = "sim_means.csv",
sql = sql,
sep = ","
)
sql <- paste0("
SELECT x_target, y_target, mean_res
FROM file
WHERE sd_vert > 0.4
"
)
read.csv.sql(
file = "sim_means.csv",
sql = sql,
sep = ","
)
sql <- paste0("
SELECT x_target, y_target, mean_res
FROM file
"
)
read.csv.sql(
file = "sim_means.csv",
sql = sql,
sep = ","
)
sql <- paste0("
SELECT x_target, y_target, mean_res,
FROM file
"
)
read.csv.sql(
file = "sim_means.csv",
sql = sql,
sep = ","
)
install.packages("vroom")
library(vroom)
data2 <- vroom("sim_means.csv")
data2 %>% head()
shiny::runApp()
deployApp()
install.packages("rsconnect")
rsconnect::setAccountInfo(name='lradloff',
token='9A6F39A9EF88345E6D046A78A1EABA13',
secret='<SECRET>')
rsconnect::setAccountInfo(name='lradloff',
token='9A6F39A9EF88345E6D046A78A1EABA13',
secret='<SECRET>')
rsconnect::setAccountInfo(name='lradloff',
token='9A6F39A9EF88345E6D046A78A1EABA13',
secret='<SECRET>')
rsconnect::setAccountInfo(name='lradloff',
token='B59BD03C3332C5D9775662DC5F39BCE6',
secret='<SECRET>')
runApp()
rsconnect::setAccountInfo(name='lradloff',
token='B59BD03C3332C5D9775662DC5F39BCE6',
secret='<SECRET>')
rsconnect::setAccountInfo(name='lradloff',
token='9A6F39A9EF88345E6D046A78A1EABA13',
secret='i9eUlOvzlx97f3Lj0FuJcVLZcudsSiZfoOaL+qb5')
runApp()
